import java.net.URI
import org.gradle.api.internal.GradleInternal

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    alias(libs.plugins.jvm)

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
// Use Maven Central for resolving dependencies.
    jcenter()
}

dependencies {
    // This dependency is used by the application.
    implementation(libs.guava)
}

testing {
    suites {
        // Configure the built-in test suite
        val test by getting(JvmTestSuite::class) {
            // Use Kotlin Test test framework
            useKotlinTest("1.9.22")
        }
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "org.example.AppKt"
}

data class RepositoryData(val name: String, val url: URI)

tasks.register("showRepositories") {
    val repositoryData = repositories.withType<MavenArtifactRepository>().map { RepositoryData(it.name, it.url) }
    val pluginRepositories = (gradle as? GradleInternal)?.settings?.pluginManagement?.repositories
    val pluginRepositoryData =
        pluginRepositories?.withType<MavenArtifactRepository>()?.map { RepositoryData(it.name, it.url) }

    doLast {
        pluginRepositoryData?.forEach {
            println("plugin repository: ${it.name} ('${it.url}')")
        }
        repositoryData.forEach {
            println("repository: ${it.name} ('${it.url}')")
        }
    }
}

tasks.register("showRepositories2") {
    val repos: List<Pair<String, String>> = dependencyResolutionRepositories()
    val projectRepositories = projectRepositories()
    val pluginManagementRepositories = pluginManagementRepositories()

    doLast {
        println("dependency resolution repositories:")
        repos.forEach() {
            println("repository: ${it.first} ('${it.second}')")
        }
        println("project repositories:")
        projectRepositories.forEach() {
            println("repository: ${it.first} ('${it.second}')")
        }
        println("plugin management repositories:")
        pluginManagementRepositories.forEach() {
            println("repository: ${it.first} ('${it.second}')")
        }
    }
}

@Suppress("UnstableApiUsage")
fun dependencyResolutionRepositories(): List<Pair<String, String>> =
    (project.gradle as GradleInternal).settings.dependencyResolutionManagement.repositories.mapToPairs()
fun projectRepositories(): List<Pair<String, String>> = project.repositories.mapToPairs()

fun pluginManagementRepositories(): List<Pair<String, String>> =
    (project.gradle as GradleInternal).settings.pluginManagement.repositories.mapToPairs()

fun RepositoryHandler.mapToPairs(): List<Pair<String, String>> =
    filterIsInstance<MavenArtifactRepository>().map { it.name to it.url.toString() }
